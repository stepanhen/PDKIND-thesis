%
%  An example of a bibliographical database in BibTeX format,
%  which is used by biblatex to create the list of referenced works.
%
%  Academic search engines and software for maintenance of bibliography
%  often supports exporting records in BibTeX format. We recommend:
%
%    - Google Scholar (https://scholar.google.com/)
%    - JabRef (https://www.jabref.org/)
%    - zoterobib (https://zbib.org/)
%
%  BEWARE:
%
%    *  If a name contains a capital letter, which must be kept such,
%       use curly brackets ({T}hailand, {HIV}).
%
%  ===========================================================================
@INPROCEEDINGS{6148908,
  author={Somenzi, Fabio and Bradley, Aaron R.},
  booktitle={2011 Formal Methods in Computer-Aided Design (FMCAD)}, 
  title={IC3: Where monolithic and incremental meet}, 
  year={2011},
  volume={},
  number={},
  pages={3-8},
  keywords={Safety;Computational modeling;Data structures;Boolean functions;Context;Approximation methods;Encoding},
  doi={}}
}
@INPROCEEDINGS{7886665,
  author={Jovanović, Dejan and Dutertre, Bruno},
  booktitle={2016 Formal Methods in Computer-Aided Design (FMCAD)}, 
  title={Property-directed k-induction}, 
  year={2016},
  volume={},
  number={},
  pages={85-92},
  keywords={Interpolation;Cognition;Writing;Software;Concrete;Algorithm design and analysis;Adaptation models},
  doi={10.1109/FMCAD.2016.7886665}
}
@inproceedings{10.1145/800157.805047,
author = {Cook, Stephen A.},
title = {The complexity of theorem-proving procedures},
year = {1971},
isbn = {9781450374644},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800157.805047},
doi = {10.1145/800157.805047},
abstract = {It is shown that any recognition problem solved by a polynomial time-bounded nondeterministic Turing machine can be “reduced” to the problem of determining whether a given propositional formula is a tautology. Here “reduced” means, roughly speaking, that the first problem can be solved deterministically in polynomial time provided an oracle is available for solving the second. From this notion of reducible, polynomial degrees of difficulty are defined, and it is shown that the problem of determining tautologyhood has the same polynomial degree as the problem of determining whether the first of two given graphs is isomorphic to a subgraph of the second. Other examples are discussed. A method of measuring the complexity of proof procedures for the predicate calculus is introduced and discussed.},
booktitle = {Proceedings of the Third Annual ACM Symposium on Theory of Computing},
pages = {151–158},
numpages = {8},
location = {Shaker Heights, Ohio, USA},
series = {STOC '71}
}
@InProceedings{10.1007/978-3-642-12002-2_12,
author="Bruttomesso, Roberto
and Pek, Edgar
and Sharygina, Natasha
and Tsitovich, Aliaksei",
editor="Esparza, Javier
and Majumdar, Rupak",
title="The OpenSMT Solver",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="150--153",
abstract="This paper describes OpenSMT, an incremental, efficient, and open-source SMT-solver. OpenSMT has been specifically designed to be easily extended with new theory-solvers, in order to be accessible for non-experts for the development of customized algorithms. We sketch the solver's architecture and interface. We discuss its distinguishing features w.r.t. other state-of-the-art solvers.",
isbn="978-3-642-12002-2"
}

@InProceedings{10.1007/978-3-319-08867-9_2,
author="Komuravelli, Anvesh
and Gurfinkel, Arie
and Chaki, Sagar",
editor="Biere, Armin
and Bloem, Roderick",
title="SMT-Based Model Checking for Recursive Programs",
booktitle="Computer Aided Verification",
year="2014",
publisher="Springer International Publishing",
address="Cham",
pages="17--34",
abstract="We present an SMT-based symbolic model checking algorithm for safety verification of recursive programs. The algorithm is modular and analyzes procedures individually. Unlike other SMT-based approaches, it maintains both over- and under-approximations of procedure summaries. Under-approximations are used to analyze procedure calls without inlining. Over-approximations are used to block infeasible counterexamples and detect convergence to a proof. We show that for programs and properties over a decidable theory, the algorithm is guaranteed to find a counterexample, if one exists. However, efficiency depends on an oracle for quantifier elimination (QE). For Boolean Programs, the algorithm is a polynomial decision procedure, matching the worst-case bounds of the best BDD-based algorithms. For Linear Arithmetic (integers and rationals), we give an efficient instantiation of the algorithm by applying QE lazily. We use existing interpolation techniques to over-approximate QE and introduce Model Based Projection to under-approximate QE. Empirical evaluation on SV-COMP benchmarks shows that our algorithm improves significantly on the state-of-the-art.",
isbn="978-3-319-08867-9"
}

@InProceedings{10.1007/11817963_14,
author="McMillan, Kenneth L.",
editor="Ball, Thomas
and Jones, Robert B.",
title="Lazy Abstraction with Interpolants",
booktitle="Computer Aided Verification",
year="2006",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="123--136",
abstract="We describe a model checker for infinite-state sequential programs, based on Craig interpolation and the lazy abstraction paradigm. On device driver benchmarks, we observe a speedup of up to two orders of magnitude relative to a similar tool using predicate abstraction.",
isbn="978-3-540-37411-4"
}

@InProceedings{10.1007/978-3-540-45069-6_1,
author="McMillan, K. L.",
editor="Hunt, Warren A.
and Somenzi, Fabio",
title="Interpolation and SAT-Based Model Checking",
booktitle="Computer Aided Verification",
year="2003",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="1--13",
abstract="We consider a fully SAT-based method of unbounded symbolic model checking based on computing Craig interpolants. In benchmark studies using a set of large industrial circuit verification instances, this method is greatly more efficient than BDD-based symbolic model checking, and compares favorably to some recent SAT-based model checking methods on positive instances.",
isbn="978-3-540-45069-6"
}

@InProceedings{10.1007/3-540-40922-X_8,
author="Sheeran, Mary
and Singh, Satnam
and St{\aa}lmarck, Gunnar",
editor="Hunt, Warren A.
and Johnson, Steven D.",
title="Checking Safety Properties Using Induction and a SAT-Solver",
booktitle="Formal Methods in Computer-Aided Design",
year="2000",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="127--144",
abstract="We take a fresh look at the problem of how to check safety properties of finite state machines. We are particularly interested in checking safety properties with the help of a SAT-solver. We describe some novel induction-based methods, and show how they are related to more standard fixpoint algorithms for invariance checking. We also present preliminary experimental results in the verification of FPGA cores. This demonstrates the practicality of combining a SAT-solver with induction for safety property checking of hardware in a real design flow.",
isbn="978-3-540-40922-9"
}

@InProceedings{10.1007/3-540-49059-0_14,
author="Biere, Armin
and Cimatti, Alessandro
and Clarke, Edmund
and Zhu, Yunshan",
editor="Cleaveland, W. Rance",
title="Symbolic Model Checking without BDDs",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="1999",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="193--207",
abstract="Symbolic Model Checking [3], [14] has proven to be a powerful technique for the verification of reactive systems. BDDs [2] have traditionally been used as a symbolic representation of the system. In this paper we show how boolean decision procedures, like St{\aa}lmarck's Method [16] or the Davis {\&} Putnam Procedure [7], can replace BDDs. This new technique avoids the space blow up of BDDs, generates counterexamples much faster, and sometimes speeds up the verification. In addition, it produces counterexamples of minimal length. We introduce a bounded model checking procedure for LTL which reduces model checking to propositional satisfiability.We show that bounded LTL model checking can be done without a tableau construction. We have implemented a model checker BMC, based on bounded model checking, and preliminary results are presented.",
isbn="978-3-540-49059-3"
}

@MISC{BarFT-SMTLIB,
  author =	 {Clark Barrett and Pascal Fontaine and Cesare Tinelli},
  title =	 {{The Satisfiability Modulo Theories Library (SMT-LIB)}},
  howpublished = {{\tt www.SMT-LIB.org}},
  year =	 2016,
}

@InProceedings{10.1007/978-3-319-40970-2_35,
author="Hyv{\"a}rinen, Antti E. J.
and Marescotti, Matteo
and Alt, Leonardo
and Sharygina, Natasha",
editor="Creignou, Nadia
and Le Berre, Daniel",
title="OpenSMT2: An SMT Solver for Multi-core and Cloud Computing",
booktitle="Theory and Applications of Satisfiability Testing -- SAT 2016",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="547--553",
abstract="This paper describes a major revision of the OpenSMT solver developed since 2008. The version 2 significantly improves its predecessor by providing a design that supports extensions, several critical bug fixes and performance improvements. The distinguishing feature of the new version is the support for a wide range of parallelization algorithms both on multi-core and cloud-computing environments. Presently the solver implements the quantifier free theories of uninterpreted functions and equalities and linear real arithmetics, and is released under the MIT license.",
isbn="978-3-319-40970-2"
}

 
@InProceedings{10.1007/978-3-031-13185-1_2,
author="Gurfinkel, Arie",
editor="Shoham, Sharon
and Vizel, Yakir",
title="Program Verification with Constrained Horn Clauses (Invited Paper)",
booktitle="Computer Aided Verification",
year="2022",
publisher="Springer International Publishing",
address="Cham",
pages="19--29",
abstract="Many problems in program verification, Model Checking, and type inference are naturally expressed as satisfiability of a verification condition expressed in a fragment of First-Order Logic called Constrained Horn Clauses (CHC). This transforms program analysis and verification tasks to the realm of first order satisfiability and into the realm of SMT solvers. In this paper, we give a brief overview of how CHCs capture verification problems for sequential imperative programs, and discuss CHC solving algorithm underlying the Spacer engine of SMT-solver Z3.",
isbn="978-3-031-13185-1"
}

@inproceedings{blicha_golem_2023,
    title = {{The Golem Horn Solver}},
    author = {Blicha, Martin and Britikov, Konstantin and Sharygina, Natasha},
    year = {2023},
    booktitle = {{Computer Aided Verification}},
    editor = {Enea, Constantin and Lal, Akash},
    publisher = {Springer Nature Switzerland},
    series = {{Lecture Notes in Computer Science}},
    location = {Cham},
    doi = {10.1007/978-3-031-37703-7_10},
    isbn = {978-3-031-37703-7},
    pages = {209--223},
}

@InProceedings{10.1007/978-3-319-08867-9_55,
    author="Birgmeier, Johannes
and Bradley, Aaron R.
and Weissenbacher, Georg",
    editor="Biere, Armin
and Bloem, Roderick",
    title="Counterexample to Induction-Guided Abstraction-Refinement (CTIGAR)",
    booktitle="Computer Aided Verification",
    year="2014",
    publisher="Springer International Publishing",
    address="Cham",
    pages="831--848",
    abstract="Typical CEGAR-based verification methods refine the abstract domain based on full counterexample traces. The finite state model checking algorithm IC3 introduced the concept of discovering, generalizing from, and thereby eliminating individual state counterexamples to induction (CTIs). This focus on individual states suggests a simpler abstraction-refinement scheme in which refinements are performed relative to single steps of the transition relation, thus reducing the expense of refinement and eliminating the need for full traces. Interestingly, this change in refinement focus leads to a natural spectrum of refinement options, including when to refine and which type of concrete single-step query to refine relative to. Experiments validate that CTI-focused abstraction refinement, or CTIGAR, is competitive with existing CEGAR-based tools.",
    isbn="978-3-319-08867-9"
}

@Inbook{Bjørner2015,
    author="Bj{\o}rner, Nikolaj
and Gurfinkel, Arie
and McMillan, Ken
and Rybalchenko, Andrey",
    editor="Beklemishev, Lev D.
and Blass, Andreas
and Dershowitz, Nachum
and Finkbeiner, Bernd
and Schulte, Wolfram",
    title="Horn Clause Solvers for Program Verification",
    bookTitle="Fields of Logic and Computation II: Essays Dedicated to Yuri Gurevich on the Occasion of His 75th Birthday",
    year="2015",
    publisher="Springer International Publishing",
    address="Cham",
    pages="24--51",
    abstract="Automatic program verification and symbolic model checking tools interface with theorem proving technologies that check satisfiability of formulas. A theme pursued in the past years by the authors of this paper has been to encode symbolic model problems directly as Horn clauses and develop dedicated solvers for Horn clauses. Our solvers are called Duality, HSF, SeaHorn, and {\$}{\$}{\backslash}mu {\{}Z{\}}{\$}{\$}and we have devoted considerable attention in recent papers to algorithms for solving Horn clauses. This paper complements these strides as we summarize main useful properties of Horn clauses, illustrate encodings of procedural program verification into Horn clauses and then highlight a number of useful simplification strategies at the level of Horn clauses. Solving Horn clauses amounts to establishing Existential positive Fixed-point Logic formulas, a perspective that was promoted by Blass and Gurevich.",
    isbn="978-3-319-23534-9",
    doi="10.1007/978-3-319-23534-9_2",
    url="https://doi.org/10.1007/978-3-319-23534-9_2"
}

@InProceedings{10.1007/978-3-030-99524-9_24,
    author="Barbosa, Haniel
and Barrett, Clark
and Brain, Martin
and Kremer, Gereon
and Lachnitt, Hanna
and Mann, Makai
and Mohamed, Abdalrhman
and Mohamed, Mudathir
and Niemetz, Aina
and N{\"o}tzli, Andres
and Ozdemir, Alex
and Preiner, Mathias
and Reynolds, Andrew
and Sheng, Ying
and Tinelli, Cesare
and Zohar, Yoni",
    editor="Fisman, Dana
and Rosu, Grigore",
    title="cvc5: A Versatile and Industrial-Strength SMT Solver",
    booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
    year="2022",
    publisher="Springer International Publishing",
    address="Cham",
    pages="415--442",
    abstract="cvc5 is the latest SMT solver in the cooperating validity checker series and builds on the successful code base of CVC4. This paper serves as a comprehensive system description of cvc5 's architectural design and highlights the major features and components introduced since CVC4  1.8. We evaluate cvc5 's performance on all benchmarks in SMT-LIB and provide a comparison against CVC4 and Z3.",
    isbn="978-3-030-99524-9"
}

@InProceedings{10.1007/978-3-540-78800-3_24,
    author="de Moura, Leonardo
and Bj{\o}rner, Nikolaj",
    editor="Ramakrishnan, C. R.
and Rehof, Jakob",
    title="Z3: An Efficient SMT Solver",
    booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
    year="2008",
    publisher="Springer Berlin Heidelberg",
    address="Berlin, Heidelberg",
    pages="337--340",
    abstract="Satisfiability Modulo Theories (SMT) problem is a decision problem for logical first order formulas with respect to combinations of background theories such as: arithmetic, bit-vectors, arrays, and uninterpreted functions. Z3 is a new and efficient SMT Solver freely available from Microsoft Research. It is used in various software verification and analysis applications.",
    isbn="978-3-540-78800-3"
}

@ARTICLE{588521,
  author={Holzmann, G.J.},
  journal={IEEE Transactions on Software Engineering}, 
  title={The model checker SPIN}, 
  year={1997},
  volume={23},
  number={5},
  pages={279-295},
  keywords={Software systems;Application software;Distributed algorithms;Control system synthesis;Algorithm design and analysis;Error correction codes;Telephony;Design methodology;Concurrent computing;Message passing},
  doi={10.1109/32.588521}
}

@article{7fb35eae-c1f2-3be3-bbd7-8ec25936313a,
 ISSN = {00224812},
 URL = {http://www.jstor.org/stable/2963594},
 author = {William Craig},
 journal = {The Journal of Symbolic Logic},
 number = {3},
 pages = {269--285},
 publisher = {Association for Symbolic Logic},
 title = {Three Uses of the Herbrand-Gentzen Theorem in Relating Model Theory and Proof Theory},
 urldate = {2025-04-20},
 volume = {22},
 year = {1957}
}
